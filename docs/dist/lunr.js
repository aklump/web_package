var lunrIndex = [{"id":"bash_scripts","title":"BASH Hooks","body":"[@see Hooks for more info](@hooks)\n\n## Callback Arguments\n\n|           data           | build.sh |\n|:-------------------------|:---------|\n| prev version             | $1       |\n| current version          | $2       |\n| package name             | $3       |\n| description              | $4       |\n| homepage                 | $5       |\n| author                   | $6       |\n| path to root             | $7       |\n| date\/time                | $8       |\n| path to info file        | $9       |\n| dir of the script        | ${10}    |\n| dir of functions.php\/.sh | ${11}    |\n| root dir of web_package  | ${12}    |\n| path to hooks dir        | ${13}    |"},{"id":"changelog","title":"Changelog","body":"All notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https:\/\/keepachangelog.com\/en\/1.0.0\/), and this project adheres to [Semantic Versioning](https:\/\/semver.org\/spec\/v2.0.0.html).\n\n## [4.0.0] - tbd\n\n### Added\n\n- lorem\n\n### Changed\n\n- `push_tags` is now a boolean\n- Rebuilt using Symfony Console.\n- configuration key `info_file` is now `version_file`.\n- hooks, all failures will now stop the build. That is `hook_exception` and `build_fail_exception` now have the same result. They should not be used. Now simple use `exit 1`, etc. PHP hooks should not throw exceptions anymore, but just `exit(1)`, etc.\n\n### Deprecated\n\n- lorem\n\n### Removed\n\n- Project info other than version is no longer handled by this project.\n- The \"update\" route was removed.\n- The \"info\" route was removed.\n- The \"test\" route was removed.\n- Removed configuration options `major_step, minor_step, patch_step`\n\n### Fixed\n\n- lorem\n\n### Security\n\n- lorem\n\n## [3.2.0] - 2021-10-14\n\n### Added\n\n- Some route aliases\n- Configurable release commit message when calling 'done'; see `release_commit_message`. Giving this configuration a value will cause a commit message to be added automatically at the start of the `done` command; **any changed files are automatically added to the commit.** It allows the following tokens: PREVIOUS, VERSION.\n- Configurable hotfix commit message when calling 'hotfix'; see `hotfix_commit_message`. Giving this configuration a value will cause a commit message to be added automatically as soon as the version string changes. It allows the following tokens: PREVIOUS, VERSION. This supercedes the use of `wp_do_version_commit`.\n\n### Changed\n\n- The default branchname from `master` to `main.\n\n## [3.1.0] - 2021-10-07\n\n### Added\n\n- Configuration to enable\/disable a single commit for version string change.\n- Small improvements to UI and stability.\n\n### Changed\n\n- Single commits with the version string change will no longer be made by default. To keep this legacy behavior you must add `do_version_commit = true` to your configuration file per project _my_project\/.web_package\/config_ or globally at _~\/.web_package\/config_.\n- Default `create_tags` is now `patch`; formerly `minor`.\n- Default `init_version` is now `0.0.1`.\n\n### Removed\n\n- Automatic single commit of version string change."},{"id":"config","title":"Configuration","body":"## Supported File Types\n\nThe following files are supported for storing version.\n\n1. YAML\n1. INI\n1. JSON\n\n## Theory\n\nThe configuration file is created during `bump init` and is located at `.web_package\/config`.  Default contents look like this:\n\n    master = \"master\"\n    develop = \"develop\"\n    git_remote = origin\n    create_tags = yes\n    push_tags = ask\n    push_master = ask\n    push_develop = ask\n\nThe entire `.web_package` directory should not be included in source control.  **To modify the configurations simply edit `.web_package\/config` directly.**  Make sure to have spaces surrounding your equal signs as `create_tags=yes` is not the same as `create_tags = yes`.  **Also you must have a line break at the end of the file!**\n\n## master: `(string)`\nThe name of the branch you consider master.  If you have more than one branch you consider a master then list them all, separated by spaces, e.g. `\"master1 master2\"` For more insight into this feature, see the [Drupal Modules\/Themes section](#drupal) below.\n\n## develop: `(string)`\nThe name of the branch you consider develop.  If you have more than one branch you consider a develop branch then list them all, separated by spaces, e.g. `\"develop1 develop2\"`.  **In the case of multiples: Make sure that you list them in the exact order as the master list, as the correlation of master to develop is imperative.**\n\n## remote: `(string)`\nThe name of the git remote to be used with `git push [git_remote] release-1.0`\n\n## create_tags: `major`, `minor`, `patch ` or `no`\nWhen executing `bump done`, determine what severity level will create a git tag.  Set to `no` to never create a tag.\n\n## push_tags: `no`, `ask` or `auto`\nIf tags should be pushed to `git_remote`.  Set to `auto` and you will not be prompted first.\n\n## push_master: `no`, `ask` or `auto`\nIf master branches should be pushed to `git_remote`.  Set to `auto` and you will not be prompted first.\n\n## push_develop: `no`, `ask` or `auto`\nIf develop branches should be pushed to `git_remote`.  Set to `auto` and you will not be prompted first.\n\n## info_file: `(string)`\n(Optional) If you have more than one .info file and you need to force Web Package to use the correct one then add this option. The name of the file containing the version info.\n\n## author: `\"(string)\"`\n(Optional) This one needs to be wrapped in quotes if you have spaces like this example\u2026 \"Aaron Klump \\\".  This will get written to `web_package.info` file during the init process.\n\n## init_version: `\"(string)\"`\n(Optional)  This is used during `bump init` to set the default version of a package.\n\n## patch_prefix: `\"(string)\"`\n(Optional)  This is used as the default patch_prefix.\n\n## php: `\"(string)\"`\n(Optional)  The path to the php to use for PHP build scripts.\n\n## bash: `\"(string)\"`\n(Optional)  The path to bash to use for shell build scripts.\n\n## pause: `\"(int)\"`\n(Optional)  Enter a number of seconds to pause before git creates a branch and adds files.  This is here in case you need to allow time for file processing after the version file has been updated. If you want to be prompted before git does it's thing enter a -1 here.\n\n## Global Configuration\nA global configuration file may be created at `~\/.web_package\/config`, the contents of which will be used as defaults for new projects or existing projects without said parameter.  This is most useful for the `author` and `info_file` parameters.  **Note: if a global config parameter is set, but the project does not override it, the global will apply for that project, even after `bump init`."},{"id":"templates","title":"Configuration Templates","body":"Let's take the use case of a Drupal module, which has a different configuration setup than a website project. For our module we want the following configuration:\n\n    master = 8.x-1.x 7.x-1.x 6.x-1.x\n    develop = 8.x-1.x 7.x-1.x 6.x-1.x\n    remote = origin\n    create_tags = patch\n    push_tags = ask\n    push_develop = no\n    push_master = ask\n    info_file = web_package.info\n    patch_prefix = -rc\n\nWouldn't it be nice to not have to retype that for every new Drupal module? Well you don't have to if you use a Global Template.\n\n## Defining a Global Template\n\nFor a template called `drupal`, create a file at `~\/.web_package\/config_drupal`, containing the configuration you wish to use for that class of projects. So the pattern is `~\/.web_package\/config_[template name]`.\n\n## Implementing a Global Template\n\nWhen creating a new project, use the command `bump init drupal` and your template will automatically be used as the default configuration.\n\n    $ mkdir new_drupal\n    $ cd new_drupal\n    $ bump init drupal\n    Template drupal used.\n    Enter package name: Drupal Module\n    Enter package description: a good one.\n\n    A new web_package \"Drupal Module\" (version: 7.x-1.0-alpha1) has been created.\n\n    $ bump config\n    master = 8.x-1.x 7.x-1.x 6.x-1.x\n    develop = 8.x-1.x 7.x-1.x 6.x-1.x\n    remote = origin\n    create_tags = patch\n    push_tags = ask\n    push_develop = no\n    push_master = ask\n    info_file = web_package.info\n    patch_prefix = -rc\n    $\n\n## Tokens\n\n* You may use the token `__DIR__` in the `version_file` value when creating templates. It will be replaced with the basename of the WP root directory."},{"id":"converting_to_symfony_console","title":"Converting To Symfony Console","body":"Sep 11, 2023, aklump\n\nStarting to convert to symfony console route by route.\n\nFirst route converted, which can be used as a model is \"init\"."},{"id":"drupal","title":"Drupal Modules\/Themes","body":"When I use this with my Drupal modules, the workflow is a bit different.  For starters, there is no master branch.  Actually the master and development branches are one in the same, but we have one branch for each major version of Drupal.  The tags become really important as the release packages are built from them.  Observe `git br -l`\n\n    * 7.x-1.x\n      6.x-1.x\n      5.x-1.x\n\nHere's how to modify the config file for a Drupal project.  Change the appropriate lines in `.web_config\/config` to look like this, assuming that you are maintaining your module for Drupal versions 6-8\u2026\n\n    master = \"8.x-1.x 7.x-1.x 6.x-1.x\"\n    develop = \"8.x-1.x 7.x-1.x 6.x-1.x\"\n    create_tags = yes\n    push_tags = ask\n\nIn summary what you are saying is this: **I have three master branches, which are one in the same with my develop branches.**  This has the benefit of letting you `bump hotfix` and `bump release` off of the same branch.  Your workflow would then resemble this:\n\n    $ mkdir drupal_module\n    $ cd drupal_module\n    $ git init\n    Initialized empty Git repository in \/Volumes\/Data\/Users\/aklump\/Repos\/git\/drupal_module\/.git\/\n    $ bump init\n    Enter package name: Drupal Module\n    Enter package description: Drupal module example\n\n    A new web_package \"Drupal Module\" has been created. Please set the initial version now.\n\n    $ bump major\n    Version bumped:  0.0.0 ---> 1.0\n    $ bump i\n    name = Drupal Module\n    description = Drupal module example\n    version = 1.0\n    $ git add .\n    $ git cim 'initial commit'\n    [master (root-commit) 7194384] initial import\n     1 file changed, 3 insertions(+)\n     create mode 100644 web_package.info\n    $ git br -m 6.x-1.x\n    $ git checkout -b 7.x-1.x\n    $ git checkout -b 8.x-1.x\n    Switched to a new branch '6.x-1.x'\n    $ git br -l\n      6.x-1.x\n      7.x-1.x\n    * 8.x-1.x\n\nAt this point the workflow is pretty much the same, although as noted you will be able to choose `bump hotfix` or `bump release` from each major Drupal version branch.  You get to decide which is best."},{"id":"filter","title":"Hook Filters","body":"## Examples\n\n```shell\nbump build lorem\nbump build lor\nbump build .sh\nbump build '*.sh'\n```"},{"id":"hooks","title":"Hooks","body":"## Highlights\n\n* Hooks are namely BASH or PHP files saved to:\n    * _.web\\_package\/hooks\/build\/_\n    * _.web\\_package\/hooks\/unbuild\/_\n    * _.web\\_package\/hooks\/dev\/_\n* The current directory is always the initialized directory, that is to say, the parent of _.web\\_package_.\n\n## BASH Hooks\n\n> For BASH hooks that fail exit with N < 255. To indicate the hook was skipped exit with 255.\n\n* For **all output** use `echo`.\n* A failure is indicated by any non-zero exit code less than 255. Failures prevent the current operation from continuing.\n* Exit with 255 to indicate the hook was skipped, for example it could not be run in a given context.\n* For best results do not duplicate exit codes in the same file. Do something like you see here if you have multiple fail points. The exception handler will be more accurate at pointing to the issue.\n\n```bash\n#!\/usr\/bin\/env bash\n\n[ ! -f \"foo.txt\" ] && exit 1\n[ ! -f \"bar.txt\" ] && exit 2\n```\n\n## PHP Hooks\n\n> For PHP hooks that fail, throw exceptions, with an exception code N < 255. To indicate the hook was skipped throw any exception with a code of 255.\n\n* For **non-error output** use `echo`.\n* A failure is indicated by throwing any exception.\n* Set the exception code to 255 to indicate the hook was skipped, for example it could not be run in a given context.\n* PHP hooks may share values with one another using the `$sandbox` array.\n* The namespace `AKlump\\WebPackage\\User` is automatically mapped to _.web\\_package\/src_ for PSR-4 classes.\n* If _.web\\_package\/vendor\/autoload.php_ exists, it will be loaded automatically."},{"id":"hooklib","title":"Hooks Library","body":"The hooks library is a directory of common used hook files.  By default the core hooks library (you should not modify this directory) comes with a number of pre-written scripts that can be copied into your projects.  Access your library of hooks by calling:\n\n    bump hookslib\n\nYou may choose to define your own Hooks Library by doing the following:\n\n1. Open or create `~\/.web_packageconfig`\n1. Add the following line, replacing the value with the path to your own hooks library.\n\n        wp_hooklib=\"$HOME\/wp-hooks\"\n\nBy default the directory will try to be opened.  You can define an alternative command to use by adding this to the above mentioned config file:\n\n        wp_hooklib_action=\"ls\""},{"id":"build_scripts","title":"Hooks: build, unbuild, dev","body":"The following commands are there to run scripts located in _.web\\_package\/hooks_.\n\n## `bump build`\nScripts added to `.web_package\/hooks\/build` are run.  By design, these scripts should serve the purpose of building the package and making it ready for a release.  Such as create a `dist` directory and copy over distribution files, etc.  **Of the three, this is the only command that is automatically called by calling `bump done`.\n\n## `bump unbuild`\nScripts added to `.web_package\/hooks\/unbuild` are run.  You may delete files as necessary to reverse the build step.\n\n## `bump dev`\nScripts added to `.web_package\/hooks\/dev` are run.  The intention here is to set up the project to be developed.  I use this to symlink dependencies during development.  These symlinks get reversed in my build scripts.\n\n## Build Scripts\n\n* Any file ending in `.php` or `.sh` found in the build script folder will be called during version bumping.\n* Any hook file can be temporarily disabled by renaming the file to begin with a single underscore\n* All hooks will be skipped if you pass `--no-hooks` in the command.\n* All hooks will be fired if you pass `--hooks` in the command.\n* There are lots of example build scripts that get installed when you to `bump init`.  They can be found in _.web\\_package\/examples_.\n\nYou may add PHP or BASH scripts to `.web_package\/hooks\/build` and they will be run each time the version increments.  You may also trigger a build by calling `bump build`.\n\nYou can also trigger a single file by passing it's filename (or portion thereof); you would want to do this if you need to trigger this one script from an external program, while preserving the callback arguments.  Here is an example (this also works for unbuild and dev), the second line shows how you can locate a script using a substr as well.\n\n        bump build 00_only_this_script.sh\n        bump build only_this\n\nSee also [BASH Scripts](bash-scripts.html)\nSee also [PHP Scripts](php-scripts.html)"},{"id":"php_scripts","title":"PHP Hooks","body":"Here is an example stub for PHP build script:"},{"id":"faq","title":"Questions","body":"## When should I use 'bump hotfix'?\n\nWhen you need to make an immediate change to the production state (master branch) of the project, you will use `bump hotfix`.  A hotfix is unique in that the release number gets bumped _before_ the work is done.\n\n## When should I use 'bump release'?\n\nWhen you have finished work on the development branch and you want to release it to the production-ready state of the project, you will use `bump release`.  A release is different from a hotfix, in that the version is bumped _after_ the work is done.\n\n## When should I use 'bump major', 'bump minor', or 'bump patch'?\n\nThese three commands are unique in that they do not interact with git in any way, they simply modify `web_package.info`.  The choice of which of the three to use is based on the severity of the changes and your versioning mandates.  However, _why_ you would use one of these three can be answered thus: __Any time that you will need to step away from the development branch for an extended period of time, but cannot release the package.__  This way you can be certain that no implementation of your web_package thinks it has the most recent version.  I would argue it's best practice to `bump_patch` at the end of each work session, if you have multiple projects underway."},{"id":"releases","title":"Release Types","body":"## Hotfix\n\n* hooks are not fired unless you pass `--hooks` param.\n\n## Release\n\n* hooks are fired unless you pass `--no-hooks` param."},{"id":"functionality","title":"semver","body":"* increments an app's version: patch, minor or major https:\/\/robo.li\/tasks\/Development  * https:\/\/robreid.io\/semver\/\n* cli for gitflow\n* task runner\n* provides a library of hooks\/tasks\n* rolls back version on failure of taskrunner\n\n## Command Map\n\n* https:\/\/robo.li\/collections\/\n\n```\nbump build ->\nbprd ->\nbump hotfix ->\n\n```"},{"id":"source_control","title":"Should `.web_package` be added to source control?","body":"Yes. You will find _.web\\_package\/.gitignore_, which should take care of excluding the unnecessary files."},{"id":"readme","title":"Web Package","body":"This project does the following for your web project.\n\n* Manages version numbers.\n* Provides a framework for building assets before release.\n\n## New Release Workflow\n\n```bash\nbump release\nbump build\ngit add .\ngit commit -m 'Build assets.'\nbump done\n```\n\n@todo"},{"id":"readme_legacy","title":"Web Package","body":"## Summary\n\nA shell script to help the management of files as a package through easy version number manipulation. Supports name, description, author and version number. Integrates with .git and uses [gitflow methodology](http:\/\/nvie.com\/posts\/a-successful-git-branching-model) to automatically merge and tag.\n\n## Script Installation\n\nThe web_package scripts need to be installed on your system once to make the tool available.  Don't confuse this with intializing a project which comes later.\n\n1. Download [this package](http:\/\/www.intheloftstudios.com\/packages\/bash\/web_package\/download) somewhere on your computer, e.g., `~\/lib\/web_package-master`.\n1. Run `composer install` to download dependencies.\n1. Make sure that `~\/bin` is in your `$PATH` variable of BASH.  To verify type `echo $PATH` in a shell window and look for the path `~\/bin`; **note that it will probably appear as the expanded home directory, not `~`**.\n1. Create a symlink to `web_package.sh` as `bump` as seen in the following snippet. (In all examples the symlink is called `bump` but that is not functionally necessary; you may rename as desired.)  For this snippet we're assuming that the package has been saved to `~\/lib\/web_package-master`\n\n        cd ~\/bin && ln -s ~\/lib\/web_package-master\/web_package.sh bump && bump\n\n1. If all went well you should see something like this:\n\n        web_package.info not found. Have you created your Web Package yet?\n\n## Why Use Web Package?\n\n* To simplify using Gitflow.\n* To incorporate build scripts in package management.\n* To automate the process of version incrementing a package.\n\nThis will save you keystrokes if you're used to typing this:\n\n    $ git add .\n    $ git cim 'some changes'\n    $ git checkout -b release-1.1\n    $ cat version.info\n    version = 1.0\n    $ echo version.info > \"version = 1.1\"\n    $ git add version.info\n    $ git cim 'Bumped version to 1.1'\n    $ git checkout develop\n    $ git merge --no-ff release-1.1\n    $ git checkout master\n    $ git merge --no-ff release-1.1\n    $ git br -d release-1.1\n    $ git checkout develop\n\nHow would you rather type this, instead from now on...\n\n    $ git add .\n    $ git cim 'some changes'\n    $ bump release\n    $ bump done\n\nIf so, Web Package is for you! Read on...\n\n## About Version Numbers\n1. Two versioning schemas may be used `(prefix-)major.minor.patch` and `(prefix-)major.minor(patch_prefix)patch`.\n2. There is no limit the to value of each part; as an example something like this is theoretically possible `999.999.999`.  Important to note: the next minor version after `1.9` is not `2.0`, but rather `1.10`.\n3. `(prefix-)` is a string of any chars ending in a hyphen, e.g. `7.x-`.\n4. `(patch_prefix)` is a string of one or more non numbers, e.g. `-alpha`.\n3. Read more about version numbers here  &&\n4. Read more about Drupal version numbers here\n5. To see many version examples type `bump test`.\n\n### Valid Examples\n* `1.0`\n* `1.0.1`\n* `7.x-1.0`\n* `7.x-1.0.1`\n* `1.0-rc1`\n* `1.0-alpha1`\n* `7.x-1.0-rc1`\n\n### Invalid Examples\n* `1` (missing minor digit, use `1.0` instead.)\n* `1-rc1` (missing minor digit, use `1.0-rc1` instead.)\n* `1.0-alpha` (missing patch digit, use `1.0-alpha1` instead.)\n* `1.0-dev` (missing patch digit, don't use `-dev` or add a patch digit.)\n\n## About Version Incrementing\n### Example 1:\n\n    patch: 0.0.1 --> 0.0.2\n    minor: 0.0.1 --> 0.1\n    major: 0.0.1 --> 1.0\n\n### Example 2:\nThe key difference to notice is that when you `bump minor` in this schema, it simply drops the patch prefix and the patch values and does _not_ increment the minor value.  Also if you `bump major` it will carry over the patch_prefix for you automatically and set the patch value to 1.\n\n    patch: 8.x-2.0-alpha6 --> 8.x-2.0-alpha7\n    minor: 8.x-2.0-alpha6 --> 8.x-2.0\n    major: 8.x-2.0-alpha6 --> 8.x-3.0-alpha1\n\n### Stepping by > 1, odd or even\nBy default, the major, minor and patch step increment is 1.  This can be changed in a `local_config` file as necessary (either user or project level).\n\n    major_step = 1\n    minor_step = 1\n    patch_step = 2\n\nLet's say that two developers are working on the same master branch and they are rolling out rapid hotfixes.  Wouldn't it be nice if developer A only did odd-numbered hotfixes and developer B only did even-numbered hotfixes, so as to not step on each others' toes?  This the idea behind version incrementing with steps > 1.\n\nYou can override the default using the `local_config` and use odd steps by adding the following lines, be sure to include a line break at the end of the line.\n\n    patch_step = \"odd\"\n\nFor even just change the value to `\"even\"`.\n\n_In this example, if you were to add this directive to the `config` file, that would negate the whole point, since `config` is checked into the repo.  You need to use the `local_config`._\n\n### Testing A Version Schema\n1. type `bump help test` for more info\n\n## About the `.info` File\nWeb Package looks for a file with the .info extension and will use that for storing the meta data about your project.  This file is one that can be parsed using php's `parse_ini_file()` function.  If none is found, then `web_package.info` will be created.  You may configure the actual filename in the config file e.g. `info_file = some_other_file.info` if these first two options do not work for you. Here is a basic `.info` file.\n\n    name = \"Apple\"\n    description = \"A red, green or yellow fruit.\"\n    homepage = http:\/\/www.intheloftstudios.com\/packages\/jquery\/apple\n    version = 0.0.1\n    author = Aaron Klump\n\n## Beginning A New Project\n1. In this example you see how we being a new project called example, initialize the git repository and start with a version number of 0.1\n1. Had you wanted to start with version 1.0, then you would have used `bump major`; and if you had wanted to start with version 0.0.1 you would have used `bump patch`.\n\n        $ mkdir example\n        $ cd example\n        $ git init\n        Initialized empty Git repository in \/Library\/WebServer\/Documents\/globalonenessproject\/site-dev\/public_html\/sites\/all\/modules\/contrib\/example\/.git\/\n        $ bump init\n        Enter package name: Example Package\n        Enter package description: An example package showing how to do this.\n\n        A new web_package \"Example Package\" has been created.\n\n        $ bump minor\n        Version bumped:  0.0.0 ---> 0.1\n        $ git add .\n        $ git commit -m 'initial commit'\n        [master (root-commit) e604ade] initial commit\n         1 file changed, 3 insertions(+)\n         create mode 100644 web_package.info\n        $\n\n## Reversing `bump init`\nBy the way--to reverse the action of `bump init`, simply delete the folder `.web_package` from the root of your project.  You may or may not want to delete the `*.info` file from the root of your project.\n\n## What to add to your project's version control\n1. You should include `.web_package` in version control.  It has a .gitignore file that you can refer to for files that may safely be excluded.\n\n## Developing A Project\n1. In this example you make your changes to the develop branch (see [gitflow](http:\/\/nvie.com\/posts\/a-successful-git-branching-model)) and then commit as normal. You could have also done things on feature branches and merged then back into develop.\n1. When all your work is done and you're ready for the release then type `bump release`; this is shorthand for `bump minor release`. If you only want a patch release then type `bump patch release`.  Consequently if you want a major release type `bump major release`.\n2. Immediately thereafter (unless you know what you're doing), type `bump done`\n\n        $ git checkout -b develop\n        Switched to a new branch 'develop'\n        $ touch do\n        $ touch re\n        $ touch mi\n        $ git add .\n        $ git commit -m 'added do re mi'\n        [develop 7094ae4] added do re mi\n         0 files changed\n         create mode 100644 do\n         create mode 100644 mi\n         create mode 100644 re\n        $ bump release\n        Version bumped:  0.1.0 ---> 0.2.0\n        M\tweb_package.info\n        Switched to a new branch 'release-0.2.0'\n        [release-0.2.0 83abd01] Version bumped from  0.1.0 to 0.2.0\n         1 file changed, 1 insertion(+), 1 deletion(-)\n        $ bump done\n        Merging into develop...\n        Switched to branch 'develop'\n        Merge made by the 'recursive' strategy.\n         web_package.info |    2 +-\n         1 file changed, 1 insertion(+), 1 deletion(-)\n        Continue to master? (y\/n) y\n        Switched to branch 'master'\n        Merge made by the 'recursive' strategy.\n         web_package.info |    2 +-\n         1 file changed, 1 insertion(+), 1 deletion(-)\n         create mode 100644 do\n         create mode 100644 mi\n         create mode 100644 re\n        Delete release-0.2.0? (y\/n) y\n        Deleted branch release-0.2.0 (was 83abd01).\n\nNow you can list the tags and see that a tag was just created that matches the current version of your package.\n\n    $ git tag -l\n    0.2.0\n    $ bump -i\n    name = Example Package\n    description = An example package showing how to do this\n    version = 0.2.0\n    $\n\nAt this point you need to use `git push` as necessary for your remotes.\n\n## Hotfix On Existing Project\nAn example of a hotfix to the master branch.\n\n1. While on the master branch type `bump hotfix`.\n2. Do the work needed.\n3. Type `bump done`.\n\n        $ git status\n        On branch master\n        nothing to commit (working directory clean)\n        $ bump hotfix\n        Version bumped:  0.2.0 ---> 0.2.1\n        M\tweb_package.info\n        Switched to a new branch 'hotfix-0.2.1'\n        [hotfix-0.2.1 75b936a] Version bumped from  0.2.0 to 0.2.1\n         1 file changed, 1 insertion(+), 1 deletion(-)\n        $ touch fa\n        $ git add .\n        $ git commit -m 'added fa'\n        [hotfix-0.2.1 75b936a] added fa\n         0 files changed\n         create mode 100644 fa\n        $ bump done\n        Merging into develop...\n        Switched to branch 'develop'\n        Merge made by the 'recursive' strategy.\n         web_package.info |    2 +-\n         1 file changed, 1 insertion(+), 1 deletion(-)\n        Continue to master? (y\/n)y\n        Switched to branch 'master'\n        Merge made by the 'recursive' strategy.\n         web_package.info |    2 +-\n         1 file changed, 1 insertion(+), 1 deletion(-)\n        Delete hotfix-0.2.1? (y\/n)y\n        Deleted branch hotfix-0.2.1 (was 75b936a).\n\nAgain, checking that a tag was created...\n\n    $ git tag -l\n    0.2.0\n    0.2.1\n    $ bump -i\n    name = Example Package\n    description = An example package showing how to do this\n    version = 0.2.1\n\n## Merge conflict during `bump done`\nFollow these steps if you experience a merge conflict after typing `bump done`; they should get you through it.\n\n1. Open the file with the conflict\n2. Remove all conflicts\n3. Save the file and `git add [file]`\n4. Repeat until all conflicts are resolved\n5. Type `git commit`\n6. Now go back the hotfix or release branch: `git checkout hotfix\u2026`\n7. Re-initiate `bump done`\n\n## Alpha, Beta and RC\nThere are three commands that will move your package through the stages, but only in the logical order.\n\n1. `bump alpha` call this when your version doesn't already contain alpha, beta or rc as the patch prefix.  Example, calling `bump alpha` on a version of `1.0` will bump your version to `1.1-alpha1`.\n2. Calling `bump beta` on when your project is already in alpha will move it to beta stage, e.g. `bump beta` when your version is `1.1-alpha5` moves it to `1.1-beta1`.\n3. Calling `bump rc` on a `1.1-beta3` bumps it to `1.1-rc1`\n4. You can go directly to beta or to rc, but not the other direction, e.g. if your version is `2.3` you can `bump rc` and it becomes `2.4-rc1`.\n\n##Contact\n**In the Loft Studios**\nAaron Klump - Developer\nPO Box 29294 Bellingham, WA 98228-1294\naim: theloft101\nskype: intheloftstudios"}]